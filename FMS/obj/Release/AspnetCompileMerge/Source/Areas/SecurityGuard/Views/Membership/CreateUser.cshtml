@model FMS.Areas.SecurityGuard.ViewModels.RegisterViewModel

@{
    ViewBag.Title = "Create User";
    Layout = "~/Areas/SecurityGuard/Views/Shared/_SecurityGuardLayoutPage.cshtml";
}
<style>
    ul.valid
    {
    	padding-top:15px;
    	padding-bottom:10px;
    	 
    }
    ul.valid li
    {
    	color:Red;
    }
</style>
<h2>
    Create User
</h2>
<div class="bread_title">
                    <div class="bread_navigation">
                        <ul>
                            <li>  @Html.ActionLink("Dashboard", "Index", "Dashboard")   </li>
                            <li>
                                 @Html.ActionLink("Manage Users", "Index", "Membership")
                            </li>
                            <li class="active">Create User</li>
                        </ul>
                    </div>
 </div>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
 
<ul class="valid">
    <li>To be a minimum of @Membership.MinRequiredPasswordLength characters in length.</li>
    @if (Membership.MinRequiredNonAlphanumericCharacters > 0)
    {
        <li>To have a minimum of @Membership.MinRequiredNonAlphanumericCharacters non-alpha numeric characters included, such as &quot;
        <span style="font-family: Courier New; font-size: 16px;">(){}-_*&^%$#@@!</span>&quot;.</li>
    }
</ul>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Enter User Credentials</legend>
        <table class="table table-striped table-condensed dTableR dataTable">
             
            <tr>
                <td>
                    @Html.LabelFor(model => model.FirstName)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "text" }) 
                     @Html.ValidationMessageFor(model => model.FirstName) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.LastName)
                </td>
                <td>
                     @Html.TextBoxFor(model => model.LastName, new { @class = "text" }) 
                     @Html.ValidationMessageFor(model => model.LastName) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.UserName)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.UserName, new { @class = "text" }) 
                    @Html.ValidationMessageFor(model => model.UserName) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.Email)
                </td>
                <td>
                     @Html.TextBoxFor(model => model.Email, new { @class = "text" }) 
                     @Html.ValidationMessageFor(model => model.Email) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.Password)
                </td>
                <td>
                    @Html.PasswordFor(model => model.Password, new { @class = "text" }) 
                     @Html.ValidationMessageFor(model => model.Password) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.ConfirmPassword)
                </td>
                <td>
                     @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "text" }) 
                     @Html.ValidationMessageFor(model => model.ConfirmPassword) 
                </td>
            </tr>
            @if (Model.RequireSecretQuestionAndAnswer)
            {
                <tr>
                    <td>
                        @Html.LabelFor(model => model.SecretQuestion)
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.SecretQuestion, new { @class = "text" }) 
                         @Html.ValidationMessageFor(model => model.SecretQuestion) 
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(model => model.SecretAnswer)
                    </td>
                    <td>
                         @Html.TextBoxFor(model => model.SecretAnswer, new { @class = "text" }) 
                        @Html.ValidationMessageFor(model => model.SecretAnswer)
                    </td>
                </tr>
        }
            <tr>
                <td>
                    @Html.LabelFor(model => model.Approve)
                </td>
                <td>
                     @Html.EditorFor(model => model.Approve, new { @class = "text" }) 
                   @Html.ValidationMessageFor(model => model.Approve) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.HiddenFor(model => model.RequireSecretQuestionAndAnswer)
                </td>
                <td>
                    <input type="submit" value="Create" />
                </td>
            </tr>
        </table>
    </fieldset>
}

 


<script type="text/javascript">

    $(function () {
        $("select").addClass("required");
        var msg = $("#username-message");
        var btn = $("input[type='submit']");

        // $("#UserName").focus();

        $("#UserName").blur(function () {

            var username = $(this).val();

            if (username.length == 0) {
                alert("No username.");
                return;
            }

            $.ajax({
                url: '@Url.Action("CheckForUniqueUser", "Membership")',
                dataType: 'json',
                type: 'GET',
                data: { userName: username },
                success: OnCheckForUniqueUserSuccess,
                error: OnCheckForUniqueUserError
            });
        });

        function OnCheckForUniqueUserSuccess(data) {
            if (data.Exists) {
                msg.text("This username already exists.  Please enter a new one.");
                btn.attr("disabled", "disabled");
            } else {
                msg.text("");
                btn.removeAttr("disabled");
            }
        }

        function OnCheckForUniqueUserError(xhr, status, error) {
            msg.text("There was an error checking uniqueness.");
        }
    });

</script>